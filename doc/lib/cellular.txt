/**
 * @mainpage
 * @brief FreeRTOS Cellular Library provides cellular network connectivity.
 * <br>
 * This documentation provides the following information about FreeRTOS Cellular Library.
 *  - API documentation for users of FreeRTOS Cellular Library
 *  - Porting guide about FreeRTOS Cellular Library for developers who want to port the library to new platform<br>
 *
 * <b>FreeRTOS Cellular Library</b>
 *  - <b>Repository structure</b><br>
 * This library contains the following three components in three folders.
 * | FreeRTOS Cellular Library folders | High Level Description |
 * | :--------------------| :--------------------- |
 * | include              | FreeRTOS Cellular Library APIs definitions help to abstract the control of cellular module. |
 * | common               | FreeRTOS Cellular Library APIs implemenation with 3GPP TS v27.007 AT commands. |
 * | modules              | FreeRTOS Cellular Library APIs implemenation with cellular module specific AT commands. |
 *
 *  - <b>Supported cellular modules</b><br>
 * Three cellular modules are supported in this library.
 * | Cellular module |
 * | :--------------------|
 * | quectel BG96         |
 * | Sierra HL7802        |
 * | Ublox SARA R4 series |
 * New cellular module can reference these module porting to be integrated into FreeRTOS Cellular Library.<br>
 * Please reference cellular common library document for detail information about porting new cellular module.
 *  - <b>Currently Supported Features in FreeRTOS Cellular Library</b>
 *   - User of FreeRTOS Cellular Library is able to use Cat-M1 cellular technology to connect to network.
 *   - User of FreeRTOS Cellular Library is able to perform control plane operations like (initialize modem, register on a network etc.) in a vendor agnostic way.
 *   - User of FreeRTOS Cellular Library is able to send and receive data using TCP/IP in a vendor agnostic way given that TCP/IP stack is running on the cellular modem.
 *   - User of FreeRTOS Cellular Library is able to put the modem in different low power modes (PSM and eDRX) in a vendor agnostic way.
 *   - User of FreeRTOS Cellular Library is able to receive asynchronous notifications about various events like "disconnected", "signal strength changed" etc. to enable them to take appropriate action as desired.
 *   - User of FreeRTOS Cellular Library is able to use the existing application protocol clients (MQTT, HTTP) over cellular seamlessly. i.e. any existing user application using MQTT which works over WiFi/Ethernet shall work over Cellular given the underlying cellular technology permits that.<br>
 *
 * <b>Porting FreeRTOS Cellular Library</b><br>
 *  - Implement @ref comm_if
 *  - Implement @ref cellular_platform related APIs and data structures in <b>cellular_platform.h</b>
 *
 */

/**
 * @page comm_if Cellular communication interface
 * @brief Cellular communication interface
 *
 * FreeRTOS Cellular Library use communication interface to communicate with cellular modules.<br>
 * Users of FreeRTOS Cellular Library should create a instance of CellularCommInterface
 * and pass it to Cellular_Init function as paremeters.
 *
 * CellularCommInterface includes the following four function pointers.
 * Reference the document page for prototype.
 *
 * - @subpage CellularCommInterfaceOpen_t
 * @copybrief CellularCommInterfaceOpen_t
 * - @subpage CellularCommInterfaceSend_t
 * @copybrief CellularCommInterfaceSend_t
 * - @subpage CellularCommInterfaceRecv_t
 * @copybrief CellularCommInterfaceRecv_t
 * - @subpage CellularCommInterfaceClose_t
 * @copybrief CellularCommInterfaceClose_t
 *
 * The following communication interface implementation can be used as reference.
 * - <a href="https://github.com/aws/amazon-freertos/blob/feature/cellular/vendors/pc/boards/windows/ports/comm_if/comm_if_windows.c">FreeRTOS windows simulator comm interface </a>
 * - <a href="https://github.com/aws/amazon-freertos/blob/feature/cellular/vendors/st/boards/stm32l475_discovery/ports/comm_if/comm_if_st.c"> STM32 L475 discovery board comm interface </a>
 * - <a href="https://github.com/aws/amazon-freertos/blob/feature/cellular/vendors/sierra/boards/sensorhub/ports/comm_if/comm_if_sierra.c"> Sierra sensorhub board comm interface </a>
 *
 * <b></b>
 * @image html comm_interaction.png width=80%
 */

/**
 * @page cellular_platform Cellular platform dependency
 * @brief Cellular platform depndency
 *
 * FreeRTOS Cellular Library makes use of the following OS platform functions.<br>
 * <b>"cellular_platform.h"</b> is referenced during FreeRTOS Cellular Library compilation.<br>
 * User of FreeRTOS Cellular Library should provide these APIs and data structures in "cellular_platform.h".<br>
 * A default implementation with FreeRTOS is provided in FreeRTOS Labs cellular demo.
 *
 * - <b>Logging</b><br>The following printf style logging functions should be provided in cellular_platform.h
```
#define CellularLogError( ... )
#define CellularLogWarn( ... )
#define CellularLogInfo( ... )
#define CellularLogDebug( ... )
```
 * - <b>Threads</b><br>The following APIs and macros should be provided in cellular_platform.h
```

bool Platform_CreateDetachedThread( void ( * threadRoutine )( void * ),
                                    void * pArgument,
                                    int32_t priority,
                                    size_t stackSize );

#define PLATFORM_THREAD_DEFAULT_STACK_SIZE    ( 2048U )
#define PLATFORM_THREAD_DEFAULT_PRIORITY      ( 5U )
```
 * - <b>Mutex</b><br>The following APIs and data structure should be provided in cellular_platform.h.<br>
 FreeRTOS Cellular Library use static mutex allocation. Data fields in PlatformMutex can be defined by developers.
```
typedef struct PlatformMutex
{
    ...
} PlatformMutex_t;

bool PlatformMutex_Create( PlatformMutex_t * pNewMutex,
                           bool recursive );
void PlatformMutex_Destroy( PlatformMutex_t * pMutex );
void PlatformMutex_Lock( PlatformMutex_t * pMutex );
bool PlatformMutex_TryLock( PlatformMutex_t * pMutex );
void PlatformMutex_Unlock( PlatformMutex_t * pMutex );
```
 * - <b>Memory</b><br>The following malloc/free style APIs should be provided in cellular_platform.h.<br>
 * The <a href="https://www.freertos.org/a00111.html">FreeRTOS memory management document</a> can be referenced for these APIs.
```
// Example implementation of FreeRTOS malloc/free
#define Platform_Malloc    pvPortMalloc
#define Platform_Free      vPortFree
```
 * - <b>EventGroup</b><br>The following APIs and handle should be provided in cellular_platform.h.<br>
 * Please reference <a href="https://www.freertos.org/event-groups-API.html">FreeRTOS EvengGroup function prototypes</a>.
```
// Example implementation of FreeRTOS EvengGroup
#define PlatformEventGroupHandle_t           EventGroupHandle_t
#define PlatformEventGroup_Delete            vEventGroupDelete
#define PlatformEventGroup_ClearBits         xEventGroupClearBits
#define PlatformEventGroup_Create            xEventGroupCreate
#define PlatformEventGroup_GetBits           xEventGroupGetBits
#define PlatformEventGroup_SetBits           xEventGroupSetBits
#define PlatformEventGroup_SetBitsFromISR    xEventGroupSetBitsFromISR
#define PlatformEventGroup_WaitBits          xEventGroupWaitBits

```
 * - <b>Delay</b><br>The following API should be provided in cellular_platform.h.<br>
 * Please reference <a href="https://www.freertos.org/a00127.html">FreeRTOS Task Control function prototypes</a>.
```
// Example implementation of FreeRTOS Task Control
#define Platform_Delay( delayMs )           vTaskDelay( pdMS_TO_TICKS( delayMs ) )

```
 */

/**
 * @paramstructs_group{cellular}
 * @paramstructs_brief{cellular,cellular}
 */

/**
 * @handles_group{cellular}
 * @handles_brief{cellular library}
 */

/**
 * @functionpointers_group{cellular}
 * @functionpointers_brief{cellular library}
 */

/**
 * @enums_group{cellular}
 * @enums_brief{cellular library}
 */

/**
 * @page cellular_config Configuration
 * @brief Configuration settings of FreeRTOS Cellular Library
 *
 * @section CELLULAR_MCC_MAX_SIZE
 *
 * Mobile country code max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 3
 *
 * @section CELLULAR_MNC_MAX_SIZE
 *
 * Mobile network code max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 3
 *
 * @section CELLULAR_ICCID_MAX_SIZE
 *
 * Integrate circuit card identity max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 20
 *
 * @section CELLULAR_IMSI_MAX_SIZE
 *
 * International Mobile Subscriber Identity max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 15
 *
 * @section CELLULAR_FW_VERSION_MAX_SIZE
 *
 * Cellular module firmware version max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 32
 *
 * @section CELLULAR_HW_VERSION_MAX_SIZE
 *
 * Cellular module hardware version max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 12
 *
 * @section CELLULAR_SERIAL_NUM_MAX_SIZE
 *
 * Cellular module serial number max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 12
 *
 * @section CELLULAR_IMEI_MAX_SIZE
 *
 * International Mobile Equipment Identity number max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 15
 *
 * @section CELLULAR_NETWORK_NAME_MAX_SIZE
 *
 * Registered network operator name max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 32
 *
 * @section CELLULAR_APN_MAX_SIZE
 *
 * Access point name max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 32
 *
 * @section CELLULAR_PDN_USERNAME_MAX_SIZE
 *
 * Packet data network username max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 32
 *
 * @section CELLULAR_PDN_PASSWORD_MAX_SIZE
 *
 * Packet data network password max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 32
 *
 * @section CELLULAR_IP_ADDRESS_MAX_SIZE
 *
 * Cellular data network IP address max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 40
 *
 * @section CELLULAR_AT_CMD_MAX_SIZE
 *
 * Cellular AT command max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 200
 *
 * @section CELLULAR_NUM_SOCKET_MAX
 *
 * Cellular module number of socket max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 12
 *
 * @section CELLULAR_MANUFACTURE_ID_MAX_SIZE
 *
 * Cellular module manufacture ID max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 20
 *
 * @section CELLULAR_MODEL_ID_MAX_SIZE
 *
 * Cellular module ID max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 10
 *
 * @section CELLULAR_EDRX_LIST_MAX_SIZE
 *
 * Cellular EDRX list max size
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 4
 *
 * @section CELLULAR_PDN_CONTEXT_ID_MIN
 *
 * Cellular PDN context ID min value
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 1
 *
 * @section CELLULAR_PDN_CONTEXT_ID_MAX
 *
 * Cellular PDN context ID max value
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 1
 *
 * @section CELLULAR_MAX_RAT_PRIORITY_COUNT
 *
 * Cellular RAT ( radio access technology ) priority count
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 1
 *
 * @section CELLULAR_MAX_SEND_DATA_LEN
 *
 * Cellular socket max send data length.
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 1460
 *
 * @section CELLULAR_MAX_RECV_DATA_LEN
 *
 * Cellular socket max receive data length
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 1500
 *
 * @section CELLULAR_SUPPORT_GETHOSTBYNAME
 *
 * Cellular module support getHostByName
 *
 * @configpossible `0 or 1`<br>
 * @configdefault 1
 *
 * @section CELLULAR_COMM_IF_SEND_TIMEOUT_MS
 *
 * Cellular comm interface send timeout in MS
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 1000
 *
 * @section CELLULAR_COMM_IF_RECV_TIMEOUT_MS
 *
 * Cellular comm interface receive timeout in MS
 *
 * @configpossible `Any positive integer`<br>
 * @configdefault 1000
 *
 * @section CELLULAR_CONFIG_STATIC_ALLOCATION_CONTEXT
 *
 * FreeRTOS Cellular Library use static context
 *
 * @configpossible `0 or 1`<br>
 * @configdefault 0
 *
 * @section CELLULAR_CONFIG_STATIC_ALLOCATION_COMM_CONTEXT
 *
 * Cellular comm interface use static context
 *
 * @configpossible `0 or 1`<br>
 * @configdefault 0
 *
 * @section CELLULAR_CONFIG_DEFAULT_RAT
 *
 * Default radio access technoloyg
 *
 * @configpossible `Any value before CELLULAR_RAT_MAX` ( Reference : @ref CellularRat_t ) <br>
 * @configdefault CELLULAR_RAT_CATM1
 */

/**
 * @functions_page{cellular,cellular}
 * @functions_brief{cellular}
 *
 * <b>Control plane APIs</b>
 *
 * - @function_name{Cellular_Init}
 * @function_brief{Cellular_Init}
 * - @function_name{Cellular_Cleanup}
 * @function_brief{Cellular_Cleanup}
 * - @function_name{Cellular_SetRatPriority}
 * @function_brief{Cellular_SetRatPriority}
 * - @function_name{Cellular_GetRatPriority}
 * @function_brief{Cellular_GetRatPriority}
 * - @function_name{Cellular_RfOn}
 * @function_brief{Cellular_RfOn}
 * - @function_name{Cellular_RfOff}
 * @function_brief{Cellular_RfOff}
 *
 * <b>Hardware info</b>
 *
 * - @function_name{Cellular_GetSimCardStatus}
 * @function_brief{Cellular_GetSimCardStatus}
 * - @function_name{Cellular_GetSimCardInfo}
 * @function_brief{Cellular_GetSimCardInfo}
 * - @function_name{Cellular_GetModemInfo}
 * @function_brief{Cellular_GetModemInfo}
 *
 * <b>Network registration</b>
 *
 * - @function_name{Cellular_GetRegisteredNetwork}
 * @function_brief{Cellular_GetRegisteredNetwork}
 * - @function_name{Cellular_GetNetworkTime}
 * @function_brief{Cellular_GetNetworkTime}
 * - @function_name{Cellular_GetSignalInfo}
 * @function_brief{Cellular_GetSignalInfo}
 * - @function_name{Cellular_GetServiceStatus}
 * @function_brief{Cellular_GetServiceStatus}
 *
 * <b>Enable data network</b>
 *
 * - @function_name{Cellular_SetPdnConfig}
 * @function_brief{Cellular_SetPdnConfig}
 * - @function_name{Cellular_GetPdnStatus}
 * @function_brief{Cellular_GetPdnStatus}
 * - @function_name{Cellular_ActivatePdn}
 * @function_brief{Cellular_ActivatePdn}
 * - @function_name{Cellular_DeactivatePdn}
 * @function_brief{Cellular_DeactivatePdn}
 * - @function_name{Cellular_GetIPAddress}
 * @function_brief{Cellular_GetIPAddress}
 * - @function_name{Cellular_SetDns}
 * @function_brief{Cellular_SetDns}
 *
 * <b>Device and network status callback functions</b>
 *
 * - @function_name{Cellular_RegisterUrcNetworkRegistrationEventCallback}
 * @function_brief{Cellular_RegisterUrcNetworkRegistrationEventCallback}
 * - @function_name{Cellular_RegisterUrcPdnEventCallback}
 * @function_brief{Cellular_RegisterUrcPdnEventCallback}
 * - @function_name{Cellular_RegisterUrcSignalStrengthChangedCallback}
 * @function_brief{Cellular_RegisterUrcSignalStrengthChangedCallback}
 * - @function_name{Cellular_RegisterModemEventCallback}
 * @function_brief{Cellular_RegisterModemEventCallback}
 * - @function_name{Cellular_RegisterUrcGenericCallback}
 * @function_brief{Cellular_RegisterUrcGenericCallback}
 *
 * <b>Power saveing modes</b>
 *
 * - @function_name{Cellular_GetPsmSettings}
 * @function_brief{Cellular_GetPsmSettings}
 * - @function_name{Cellular_SetPsmSettings}
 * @function_brief{Cellular_SetPsmSettings}
 * - @function_name{Cellular_GetEidrxSettings}
 * @function_brief{Cellular_GetEidrxSettings}
 * - @function_name{Cellular_SetEidrxSettings}
 * @function_brief{Cellular_SetEidrxSettings}
 *
 * <b>Custom AT command</b>
 *
 * - @function_name{Cellular_ATCommandRaw}
 * @function_brief{Cellular_ATCommandRaw}
 *
 * <b>Data plan APIs</b>
 *
 * - @function_name{Cellular_CreateSocket}
 * @function_brief{Cellular_CreateSocket}
 * - @function_name{Cellular_SocketConnect}
 * @function_brief{Cellular_SocketConnect}
 * - @function_name{Cellular_SocketSend}
 * @function_brief{Cellular_SocketSend}
 * - @function_name{Cellular_SocketRecv}
 * @function_brief{Cellular_SocketRecv}
 * - @function_name{Cellular_SocketClose}
 * @function_brief{Cellular_SocketClose}
 * - @function_name{Cellular_GetHostByName}
 * @function_brief{Cellular_GetHostByName}
 * - @function_name{Cellular_SocketSetSockOpt}
 * @function_brief{Cellular_SocketSetSockOpt}
 * - @function_name{Cellular_SocketRegisterSocketOpenCallback}
 * @function_brief{Cellular_SocketRegisterSocketOpenCallback}
 * - @function_name{Cellular_SocketRegisterDataReadyCallback}
 * @function_brief{Cellular_SocketRegisterDataReadyCallback}
 * - @function_name{Cellular_SocketRegisterClosedCallback}
 * @function_brief{Cellular_SocketRegisterClosedCallback}
 */